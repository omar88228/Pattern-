package builder;

import entity.*;
import enumeration.Type;

public class BuilderImmobile<T extends Immobile> implements IBuilderImmobile<T> {
	private int surface;
	private int localNumber;
	private int numberOfSwimmingpools;
	private int floor;
	private String gateType;
	private Address address;
	private Type type;

	@Override
	public IBuilderImmobile<T> surface(int surface) {

		return this;
	}

	@Override
	public IBuilderImmobile<T> localNumber(int localNumber) {
		this.localNumber = localNumber;
		return this;
	}

	@Override
	public IBuilderImmobile<T> floor(int floor) {
		
			this.floor = floor;
		

		return this;
	}

	@Override
	public IBuilderImmobile<T> address(Address address) {
		this.address = address;
		return this;
	}

	@Override
	public IBuilderImmobile<T> type(String type) {
		this.type = Type.valueOf(type);
		return this;
	}

	@Override
	public IBuilderImmobile<T> numberOfSwimmingpools(int numberOfSwimmingpools) {

		this.numberOfSwimmingpools = numberOfSwimmingpools;

		return this;
	}

	@Override
	public IBuilderImmobile<T> gateType(String gateType) {

		this.gateType = gateType;

		return this;
	}

	@Override
	public T build() {
		if (this.type.name().equalsIgnoreCase("VILLA")) {
			return (T) new Villa(numberOfSwimmingpools, gateType, surface, localNumber, address, type);
		}
		if (this.type.name().equalsIgnoreCase("garage")) {
			return (T) new Garage(surface, localNumber, address, type, gateType);
		}
		if (this.type.name().equalsIgnoreCase("APARTMENT")) {
			return (T) new Appartment(surface, localNumber, address, type, floor);
		}
		return null;
	}

}
