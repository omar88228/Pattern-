package builder;

import entity.Address;
import entity.IEstate;
import entity.Immobile;
import entity.Villa;
import enumeration.Type;

public abstract class AbstractBuilder <T extends AbstractBuilder<T>>  implements IBuilder  {
	private int surface;
	private Address address;
	private Type type ;
	private int localNumber ;
	
	
	public AbstractBuilder(int surface, Address address, Type type, int localNumber) {
		super();
		this.surface = surface;
		this.address = address;
		this.type = type;
		this.localNumber = localNumber;
	}

	public  AbstractBuilder()  {
		
	}
	
	@Override
	public T surface(int surface) {
		this.surface=surface;
		return getThis();
	}
	@Override
	public T localNumber(int localNumber) {
		this.localNumber=localNumber;
		return getThis();
	}
	
	@Override
	public T address(Address address) {
		this.address=address;
		return getThis();
	}
	@Override
	public T type(String type) {
		this.type=Type.valueOf(type);
		return getThis();
	}
	
	public abstract T getThis();
	


}
